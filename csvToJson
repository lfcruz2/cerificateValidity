import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
import json
import bz2
import zipfile
import os

# ---------- Conversion Functions ----------

def csv_to_json():
    csv_file = filedialog.askopenfilename(
        title="Select CSV File", filetypes=(("CSV Files", "*.csv"),)
    )
    if not csv_file:
        return
    json_file = filedialog.asksaveasfilename(
        title="Save JSON File", defaultextension=".json", filetypes=(("JSON Files", "*.json"),)
    )
    if not json_file:
        return
    try:
        df = pd.read_csv(csv_file)
        df.to_json(json_file, orient='records', indent=4)
        messagebox.showinfo("Success", "CSV successfully converted to JSON!")
    except Exception as e:
        messagebox.showerror("Error", f"Error: {str(e)}")

def json_to_csv():
    json_file = filedialog.askopenfilename(
        title="Select JSON File", filetypes=(("JSON Files", "*.json"),)
    )
    if not json_file:
        return
    csv_file = filedialog.asksaveasfilename(
        title="Save CSV File", defaultextension=".csv", filetypes=(("CSV Files", "*.csv"),)
    )
    if not csv_file:
        return
    try:
        df = pd.read_json(json_file)
        df.to_csv(csv_file, index=False)
        messagebox.showinfo("Success", "JSON successfully converted to CSV!")
    except Exception as e:
        messagebox.showerror("Error", f"Error: {str(e)}")

def bz2_json_to_csv():
    bz2_file = filedialog.askopenfilename(
        title="Select BZ2 JSON File", filetypes=(("BZ2 Files", "*.bz2"),)
    )
    if not bz2_file:
        return
    csv_file = filedialog.asksaveasfilename(
        title="Save CSV File", defaultextension=".csv", filetypes=(("CSV Files", "*.csv"),)
    )
    if not csv_file:
        return
    try:
        with bz2.open(bz2_file, 'rt', encoding='utf-8') as f:
            data = json.load(f)
        df = pd.DataFrame(data)
        df.to_csv(csv_file, index=False)
        messagebox.showinfo("Success", "BZ2 JSON successfully converted to CSV!")
    except Exception as e:
        messagebox.showerror("Error", f"Error: {str(e)}")

def zip_json_to_csv():
    zip_file_path = filedialog.askopenfilename(
        title="Select ZIP File", filetypes=(("ZIP Files", "*.zip"),)
    )
    if not zip_file_path:
        return
    output_dir = filedialog.askdirectory(title="Select Output Directory")
    if not output_dir:
        return
    try:
        with zipfile.ZipFile(zip_file_path, 'r') as zipf:
            # Filter to only JSON files in the ZIP archive
            json_files = [info for info in zipf.infolist() if info.filename.endswith('.json')]
            if not json_files:
                messagebox.showinfo("No JSON files", "No JSON files found in the ZIP archive.")
                return
            for info in json_files:
                with zipf.open(info) as file_obj:
                    try:
                        data = json.load(file_obj)
                    except Exception as e:
                        messagebox.showerror("Error", f"Error reading JSON from {info.filename}: {e}")
                        continue
                    df = pd.DataFrame(data)
                    base_name = os.path.basename(info.filename)
                    csv_file_name = os.path.splitext(base_name)[0] + ".csv"
                    output_path = os.path.join(output_dir, csv_file_name)
                    df.to_csv(output_path, index=False)
            messagebox.showinfo("Success", "ZIP file processed successfully!")
    except Exception as e:
        messagebox.showerror("Error", f"Error processing ZIP file: {str(e)}")

def process_folder_to_csv():
    folder_path = filedialog.askdirectory(title="Select Folder to Process")
    if not folder_path:
        return
    output_dir = filedialog.askdirectory(title="Select Output Directory for CSV Files")
    if not output_dir:
        return

    processed_files = 0
    error_files = 0

    # Iterate over all items in the selected folder
    for filename in os.listdir(folder_path):
        full_path = os.path.join(folder_path, filename)
        if os.path.isfile(full_path):
            ext = os.path.splitext(filename)[1].lower()
            try:
                if ext == ".json":
                    with open(full_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                    df = pd.DataFrame(data)
                    out_file = os.path.join(output_dir, os.path.splitext(filename)[0] + ".csv")
                    df.to_csv(out_file, index=False)
                    processed_files += 1
                elif ext == ".bz2":
                    with bz2.open(full_path, 'rt', encoding='utf-8') as f:
                        data = json.load(f)
                    df = pd.DataFrame(data)
                    out_file = os.path.join(output_dir, os.path.splitext(filename)[0] + ".csv")
                    df.to_csv(out_file, index=False)
                    processed_files += 1
                elif ext == ".zip":
                    with zipfile.ZipFile(full_path, 'r') as zipf:
                        json_files = [info for info in zipf.infolist() if info.filename.endswith('.json')]
                        for info in json_files:
                            with zipf.open(info) as file_obj:
                                data = json.load(file_obj)
                            df = pd.DataFrame(data)
                            base_name = os.path.basename(info.filename)
                            csv_file_name = os.path.splitext(base_name)[0] + ".csv"
                            out_file = os.path.join(output_dir, csv_file_name)
                            df.to_csv(out_file, index=False)
                            processed_files += 1
            except Exception as e:
                error_files += 1

    messagebox.showinfo("Processing Completed", 
                        f"Processed {processed_files} files.\nErrors in {error_files} files.")

# ---------- Windows for Each Functionality ----------

def open_csv_to_json_window():
    window = tk.Toplevel(root)
    window.title("CSV to JSON Converter")
    window.geometry("400x200")
    tk.Label(window, text="Convert CSV to JSON", font=("Arial", 12)).pack(pady=10)
    tk.Button(window, text="Select CSV and Convert", command=csv_to_json).pack(pady=20)
    tk.Button(window, text="Close", command=window.destroy).pack(pady=10)

def open_json_to_csv_window():
    window = tk.Toplevel(root)
    window.title("JSON to CSV Converter")
    window.geometry("400x200")
    tk.Label(window, text="Convert JSON to CSV", font=("Arial", 12)).pack(pady=10)
    tk.Button(window, text="Select JSON and Convert", command=json_to_csv).pack(pady=20)
    tk.Button(window, text="Close", command=window.destroy).pack(pady=10)

def open_bz2_json_to_csv_window():
    window = tk.Toplevel(root)
    window.title("BZ2 JSON to CSV Converter")
    window.geometry("400x200")
    tk.Label(window, text="Convert BZ2-compressed JSON to CSV", font=("Arial", 12)).pack(pady=10)
    tk.Button(window, text="Select BZ2 JSON and Convert", command=bz2_json_to_csv).pack(pady=20)
    tk.Button(window, text="Close", command=window.destroy).pack(pady=10)

def open_zip_json_to_csv_window():
    window = tk.Toplevel(root)
    window.title("ZIP JSON to CSV Converter")
    window.geometry("400x200")
    tk.Label(window, text="Convert JSON inside ZIP to CSV", font=("Arial", 12)).pack(pady=10)
    tk.Button(window, text="Select ZIP and Convert", command=zip_json_to_csv).pack(pady=20)
    tk.Button(window, text="Close", command=window.destroy).pack(pady=10)

def open_process_folder_window():
    window = tk.Toplevel(root)
    window.title("Process Folder to CSV")
    window.geometry("400x200")
    tk.Label(window, text="Process Folder: Convert JSON, BZ2, or ZIP files to CSV", font=("Arial", 12)).pack(pady=10)
    tk.Button(window, text="Select Folder and Process", command=process_folder_to_csv).pack(pady=20)
    tk.Button(window, text="Close", command=window.destroy).pack(pady=10)

# ---------- Home Page Panel ----------

root = tk.Tk()
root.title("Data Converter Home")
root.geometry("350x350")

tk.Label(root, text="Select a Conversion Option:", font=("Arial", 14)).pack(pady=10)

tk.Button(root, text="CSV to JSON", width=25, command=open_csv_to_json_window).pack(pady=5)
tk.Button(root, text="JSON to CSV", width=25, command=open_json_to_csv_window).pack(pady=5)
tk.Button(root, text="BZ2 JSON to CSV", width=25, command=open_bz2_json_to_csv_window).pack(pady=5)
tk.Button(root, text="ZIP JSON to CSV", width=25, command=open_zip_json_to_csv_window).pack(pady=5)
tk.Button(root, text="Process Folder to CSV", width=25, command=open_process_folder_window).pack(pady=5)

root.mainloop()
