----------------------------------------------------------------------------------------------
component diagram
----------------------------------------------------------------------------------------------
  
flowchart LR
    %% Define Subgraph for the Auth Service
    subgraph AuthService[Auth Service out2]
      A1[Endpoint 1:<br/>User Credentials<br/>→ Auth Code]
      A2[Endpoint 2:<br/>Client Credentials<br/>→ Token]
      A3[Endpoint 3:<br/>User Data via Auth Code]
    end

    %% Other components
    B[React/Next App Frontend]
    C[Application Backend Service]
    D[(SQL Server<br/>Database)]

    %% Connections
    B --> |Redirect for Login| A1
    B --> |Request Client<br/>Credentials Token| A2
    B --> |Request User Data<br/>with Auth Code| A3

    B --> |API Calls with Token| C
    C --> |Access / Update| D



----------------------------------------------------------------------------------------------
normal process
----------------------------------------------------------------------------------------------

sequenceDiagram
    participant U as User (Browser)
    participant R as React Next App
    participant Auth as Auth Service (out2)
    participant AuthEP3 as Auth Service - User Info Endpoint
    participant B as Application Backend

    U->>R: 1. Access the Next App
    R->>Auth: 2. Redirect user for login
    Auth-->>R: 3. Redirect back with Authorization Code
    R->>Auth: 4. Request Client Credentials Token
    Auth-->>R: 5. Return Client Credentials Token (valid for 1 hour)
    R->>AuthEP3: 6. Request user details with Authorization Code
    AuthEP3-->>R: 7. Return user details (employee ID, email, etc.)
    R->>B: 8. Check user registration and role using Client Credentials Token
    B-->>R: 9. Return role/entitlement
    R->>U: 10. Provide user access to resources based on role

    note over R,B: Subsequent Communications

    R->>B: 11. Call backend endpoints with the Client Credentials Token
    B-->>R: 12. Return protected data if token is valid
    R->>R: 13. If token is expired, reinitiate login flow

      
----------------------------------------------------------------------------------------------
  attestation
----------------------------------------------------------------------------------------------
sequenceDiagram
    participant U as User (Browser)
    participant R as React/Next App
    participant Auth as Auth Service (out2)
    participant B as Application Backend

    U->>R: 1. Click unique link (includes specific attestation code)
    note over U,R: Link is tied to the user/email and the form ID

    R->>Auth: 2. Redirect to Auth Service for login
    Auth-->>R: 3. Return Authorization Code (once user authenticates)
    
    R->>Auth: 4. Request Client Credentials Token
    Auth-->>R: 5. Return Client Credentials Token (valid 1 hour)

    note over R: User now has an authenticated session & a valid token

    R->>R: 6. Since attestation doesn't require role validation,<br/>proceed directly to attestation form
    R->>B: 7. Populate form data using Client Credentials Token
    B-->>R: 8. Return form data (pre-filled info)

    note over R: User fills out the form

    R->>B: 9. Submit attestation using Client Credentials Token
    B-->>R: 10. Return success/failure result
    
    R->>U: 11. Show confirmation page to user

    note over U,R: The user cannot access other restricted parts <br/> of the application without having the proper role


Question 3: Which OAuth 2.0 grant types does the application use?
From your description, the process involves:

Authorization Code Grant:
Used when the user logs in via the OAuth 2.0 service and receives an authorization code.
This is a secure grant type that ensures user authentication.
Client Credentials Grant:
Used by the application to generate a token for backend communication.
This token allows secure server-to-server interactions.
Question 10: What claims are required in the ID Token?
Based on your process:

The application needs user identification details after login:

sub: Unique user identifier.
email: User’s email.
name: Full name of the user (optional).
employee_id: Custom claim for the employee ID.
The claims should be mapped to the following scopes:

profile: For basic user info (name, sub).
email: For the user’s email address.
Custom claims: If employee_id is required, ensure it is part of the token.
Question 12: Does the application require refresh tokens to obtain new access tokens?
Your application does not currently use refresh tokens, as:

The client credentials token is generated dynamically and used immediately for backend communication.
Access tokens are sufficient for your flow because each request seems session-based.
      
