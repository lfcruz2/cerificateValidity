def apply_transformation(df: pd.DataFrame, new_column_name: str, transformation_expr: str) -> pd.DataFrame:
    """
    Applies a transformation to the DataFrame to create a new column.
    
    The transformation_expr is a string that will be evaluated on the DataFrame using pandas.eval.
    For example, if your DataFrame has columns "age" and "salary", you might pass:
        transformation_expr = "age + 10"
    to create a new column with each value equal to the corresponding "age" plus 10.
    
    Args:
        df (pd.DataFrame): The DataFrame to transform.
        new_column_name (str): The name of the new column to create.
        transformation_expr (str): The transformation expression to evaluate.
    
    Returns:
        pd.DataFrame: The DataFrame with the new derived column added.
    
    Raises:
        ValueError: If there is an error applying the transformation.
    """
    try:
        df[new_column_name] = df.eval(transformation_expr)
    except Exception as e:
        raise ValueError(f"Error applying transformation: {e}")
    return df
