
---

### 1. Build the GUI with Tkinter

Tkinter comes with Python so you donâ€™t need to install extra packages. In the GUI, you can add a button that, when clicked, opens a file dialog to select the CSV file. You then ask the user where to save the JSON file and perform the conversion.

Below is a sample code snippet:

```python
import tkinter as tk
from tkinter import filedialog, messagebox
import csv
import json

def convert_csv_to_json():
    # Ask user to select a CSV file
    csv_file_path = filedialog.askopenfilename(
        title="Select CSV File",
        filetypes=(("CSV Files", "*.csv"),)
    )
    if not csv_file_path:
        return

    # Ask user where to save the JSON file
    json_file_path = filedialog.asksaveasfilename(
        title="Save JSON File",
        defaultextension=".json",
        filetypes=(("JSON Files", "*.json"),)
    )
    if not json_file_path:
        return

    try:
        data = []
        # Open and read the CSV file
        with open(csv_file_path, 'r', newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                data.append(row)
        # Write data to a JSON file
        with open(json_file_path, 'w', encoding='utf-8') as jsonfile:
            json.dump(data, jsonfile, indent=4)
        messagebox.showinfo("Success", "CSV converted to JSON successfully!")
    except Exception as e:
        messagebox.showerror("Error", f"An error occurred: {str(e)}")

# Create the main window
root = tk.Tk()
root.title("CSV to JSON Converter")
root.geometry("300x100")

# Add a button to start the conversion
button = tk.Button(root, text="Convert CSV to JSON", command=convert_csv_to_json)
button.pack(expand=True)

# Run the application
root.mainloop()
```

**How It Works:**

- **File Dialogs:**  
  The `filedialog.askopenfilename()` and `asksaveasfilename()` functions allow the user to select the input CSV and output JSON files respectively.

- **Conversion Process:**  
  The code reads the CSV using `csv.DictReader` (which creates a dictionary for each row) and then writes the list of dictionaries to a JSON file using `json.dump()`.

- **User Feedback:**  
  Message boxes inform the user if the conversion was successful or if any errors occurred.

---

### 2. Packaging the Application for End Users

Since your target user has no technical skills, you want them to just click on an icon to run the application. To achieve this, you can package your Python script into a standalone executable using a tool like **PyInstaller**.

**Steps to Package with PyInstaller:**

1. **Install PyInstaller:**  
   ```bash
   pip install pyinstaller
   ```

2. **Create the Executable:**  
   Run the following command in your terminal or command prompt:
   ```bash
   pyinstaller --onefile --windowed your_script.py
   ```
   - `--onefile` tells PyInstaller to bundle everything into a single executable.
   - `--windowed` prevents a console window from appearing (ideal for GUI apps).

3. **Distribute the Executable:**  
   After the build process, you'll find the executable in the `dist` folder. You can then create a desktop shortcut to this file so that the end user can easily run the application.
